// Code generated by rlpgen. DO NOT EDIT.

package types

import "github.com/ethereum/go-ethereum/common"
import "github.com/ethereum/go-ethereum/rlp"
import "io"

func (obj *AfterGingerbreadHeader) EncodeRLP(_w io.Writer) error {
	w := rlp.NewEncoderBuffer(_w)
	_tmp0 := w.List()
	w.WriteBytes(obj.ParentHash[:])
	w.WriteBytes(obj.UncleHash[:])
	w.WriteBytes(obj.Coinbase[:])
	w.WriteBytes(obj.Root[:])
	w.WriteBytes(obj.TxHash[:])
	w.WriteBytes(obj.ReceiptHash[:])
	w.WriteBytes(obj.Bloom[:])
	if obj.Difficulty == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.Difficulty.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.Difficulty)
	}
	if obj.Number == nil {
		w.Write(rlp.EmptyString)
	} else {
		if obj.Number.Sign() == -1 {
			return rlp.ErrNegativeBigInt
		}
		w.WriteBigInt(obj.Number)
	}
	w.WriteUint64(obj.GasLimit)
	w.WriteUint64(obj.GasUsed)
	w.WriteUint64(obj.Time)
	w.WriteBytes(obj.Extra)
	w.WriteBytes(obj.MixDigest[:])
	w.WriteBytes(obj.Nonce[:])
	_tmp1 := obj.BaseFee != nil
	_tmp2 := obj.WithdrawalsHash != nil
	_tmp3 := obj.BlobGasUsed != nil
	_tmp4 := obj.ExcessBlobGas != nil
	_tmp5 := obj.ParentBeaconRoot != nil
	if _tmp1 || _tmp2 || _tmp3 || _tmp4 || _tmp5 {
		if obj.BaseFee == nil {
			w.Write(rlp.EmptyString)
		} else {
			if obj.BaseFee.Sign() == -1 {
				return rlp.ErrNegativeBigInt
			}
			w.WriteBigInt(obj.BaseFee)
		}
	}
	if _tmp2 || _tmp3 || _tmp4 || _tmp5 {
		if obj.WithdrawalsHash == nil {
			w.Write([]byte{0x80})
		} else {
			w.WriteBytes(obj.WithdrawalsHash[:])
		}
	}
	if _tmp3 || _tmp4 || _tmp5 {
		if obj.BlobGasUsed == nil {
			w.Write([]byte{0x80})
		} else {
			w.WriteUint64((*obj.BlobGasUsed))
		}
	}
	if _tmp4 || _tmp5 {
		if obj.ExcessBlobGas == nil {
			w.Write([]byte{0x80})
		} else {
			w.WriteUint64((*obj.ExcessBlobGas))
		}
	}
	if _tmp5 {
		if obj.ParentBeaconRoot == nil {
			w.Write([]byte{0x80})
		} else {
			w.WriteBytes(obj.ParentBeaconRoot[:])
		}
	}
	w.ListEnd(_tmp0)
	return w.Flush()
}

func (obj *AfterGingerbreadHeader) DecodeRLP(dec *rlp.Stream) error {
	var _tmp0 AfterGingerbreadHeader
	{
		if _, err := dec.List(); err != nil {
			return err
		}
		// ParentHash:
		var _tmp1 common.Hash
		if err := dec.ReadBytes(_tmp1[:]); err != nil {
			return err
		}
		_tmp0.ParentHash = _tmp1
		// UncleHash:
		var _tmp2 common.Hash
		if err := dec.ReadBytes(_tmp2[:]); err != nil {
			return err
		}
		_tmp0.UncleHash = _tmp2
		// Coinbase:
		var _tmp3 common.Address
		if err := dec.ReadBytes(_tmp3[:]); err != nil {
			return err
		}
		_tmp0.Coinbase = _tmp3
		// Root:
		var _tmp4 common.Hash
		if err := dec.ReadBytes(_tmp4[:]); err != nil {
			return err
		}
		_tmp0.Root = _tmp4
		// TxHash:
		var _tmp5 common.Hash
		if err := dec.ReadBytes(_tmp5[:]); err != nil {
			return err
		}
		_tmp0.TxHash = _tmp5
		// ReceiptHash:
		var _tmp6 common.Hash
		if err := dec.ReadBytes(_tmp6[:]); err != nil {
			return err
		}
		_tmp0.ReceiptHash = _tmp6
		// Bloom:
		var _tmp7 Bloom
		if err := dec.ReadBytes(_tmp7[:]); err != nil {
			return err
		}
		_tmp0.Bloom = _tmp7
		// Difficulty:
		_tmp8, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.Difficulty = _tmp8
		// Number:
		_tmp9, err := dec.BigInt()
		if err != nil {
			return err
		}
		_tmp0.Number = _tmp9
		// GasLimit:
		_tmp10, err := dec.Uint64()
		if err != nil {
			return err
		}
		_tmp0.GasLimit = _tmp10
		// GasUsed:
		_tmp11, err := dec.Uint64()
		if err != nil {
			return err
		}
		_tmp0.GasUsed = _tmp11
		// Time:
		_tmp12, err := dec.Uint64()
		if err != nil {
			return err
		}
		_tmp0.Time = _tmp12
		// Extra:
		_tmp13, err := dec.Bytes()
		if err != nil {
			return err
		}
		_tmp0.Extra = _tmp13
		// MixDigest:
		var _tmp14 common.Hash
		if err := dec.ReadBytes(_tmp14[:]); err != nil {
			return err
		}
		_tmp0.MixDigest = _tmp14
		// Nonce:
		var _tmp15 BlockNonce
		if err := dec.ReadBytes(_tmp15[:]); err != nil {
			return err
		}
		_tmp0.Nonce = _tmp15
		// BaseFee:
		if dec.MoreDataInList() {
			_tmp16, err := dec.BigInt()
			if err != nil {
				return err
			}
			_tmp0.BaseFee = _tmp16
			// WithdrawalsHash:
			if dec.MoreDataInList() {
				var _tmp17 common.Hash
				if err := dec.ReadBytes(_tmp17[:]); err != nil {
					return err
				}
				_tmp0.WithdrawalsHash = &_tmp17
				// BlobGasUsed:
				if dec.MoreDataInList() {
					_tmp18, err := dec.Uint64()
					if err != nil {
						return err
					}
					_tmp0.BlobGasUsed = &_tmp18
					// ExcessBlobGas:
					if dec.MoreDataInList() {
						_tmp19, err := dec.Uint64()
						if err != nil {
							return err
						}
						_tmp0.ExcessBlobGas = &_tmp19
						// ParentBeaconRoot:
						if dec.MoreDataInList() {
							var _tmp20 common.Hash
							if err := dec.ReadBytes(_tmp20[:]); err != nil {
								return err
							}
							_tmp0.ParentBeaconRoot = &_tmp20
						}
					}
				}
			}
		}
		if err := dec.ListEnd(); err != nil {
			return err
		}
	}
	*obj = _tmp0
	return nil
}
